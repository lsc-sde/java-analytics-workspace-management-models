/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.lsc.sde.analytics.workspace.management.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.lsc.sde.analytics.workspace.management.models.V1AnalyticsDataSourceBindingSpecApprovals;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/**
 * V1AnalyticsDataSourceBindingSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-03T09:52:21.861Z[Etc/UTC]")
public class V1AnalyticsDataSourceBindingSpec {
  public static final String SERIALIZED_NAME_APPROVALS = "approvals";
  @SerializedName(SERIALIZED_NAME_APPROVALS)
  private List<V1AnalyticsDataSourceBindingSpecApprovals> approvals = null;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_DATASOURCE = "datasource";
  @SerializedName(SERIALIZED_NAME_DATASOURCE)
  private String datasource;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private LocalDate expires;

  public static final String SERIALIZED_NAME_WORKSPACE = "workspace";
  @SerializedName(SERIALIZED_NAME_WORKSPACE)
  private String workspace;


  public V1AnalyticsDataSourceBindingSpec approvals(List<V1AnalyticsDataSourceBindingSpecApprovals> approvals) {
    
    this.approvals = approvals;
    return this;
  }

  public V1AnalyticsDataSourceBindingSpec addApprovalsItem(V1AnalyticsDataSourceBindingSpecApprovals approvalsItem) {
    if (this.approvals == null) {
      this.approvals = new ArrayList<>();
    }
    this.approvals.add(approvalsItem);
    return this;
  }

   /**
   * Get approvals
   * @return approvals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<V1AnalyticsDataSourceBindingSpecApprovals> getApprovals() {
    return approvals;
  }


  public void setApprovals(List<V1AnalyticsDataSourceBindingSpecApprovals> approvals) {
    this.approvals = approvals;
  }


  public V1AnalyticsDataSourceBindingSpec comments(String comments) {
    
    this.comments = comments;
    return this;
  }

   /**
   * Any comments relating to this binding.
   * @return comments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any comments relating to this binding.")

  public String getComments() {
    return comments;
  }


  public void setComments(String comments) {
    this.comments = comments;
  }


  public V1AnalyticsDataSourceBindingSpec datasource(String datasource) {
    
    this.datasource = datasource;
    return this;
  }

   /**
   * The datasource to match
   * @return datasource
  **/
  @ApiModelProperty(required = true, value = "The datasource to match")

  public String getDatasource() {
    return datasource;
  }


  public void setDatasource(String datasource) {
    this.datasource = datasource;
  }


  public V1AnalyticsDataSourceBindingSpec expires(LocalDate expires) {
    
    this.expires = expires;
    return this;
  }

   /**
   * The date at which this binding expires
   * @return expires
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date at which this binding expires")

  public LocalDate getExpires() {
    return expires;
  }


  public void setExpires(LocalDate expires) {
    this.expires = expires;
  }


  public V1AnalyticsDataSourceBindingSpec workspace(String workspace) {
    
    this.workspace = workspace;
    return this;
  }

   /**
   * REQUIRED. The name of the workspace in kubernetes
   * @return workspace
  **/
  @ApiModelProperty(required = true, value = "REQUIRED. The name of the workspace in kubernetes")

  public String getWorkspace() {
    return workspace;
  }


  public void setWorkspace(String workspace) {
    this.workspace = workspace;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AnalyticsDataSourceBindingSpec v1AnalyticsDataSourceBindingSpec = (V1AnalyticsDataSourceBindingSpec) o;
    return Objects.equals(this.approvals, v1AnalyticsDataSourceBindingSpec.approvals) &&
        Objects.equals(this.comments, v1AnalyticsDataSourceBindingSpec.comments) &&
        Objects.equals(this.datasource, v1AnalyticsDataSourceBindingSpec.datasource) &&
        Objects.equals(this.expires, v1AnalyticsDataSourceBindingSpec.expires) &&
        Objects.equals(this.workspace, v1AnalyticsDataSourceBindingSpec.workspace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvals, comments, datasource, expires, workspace);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AnalyticsDataSourceBindingSpec {\n");
    sb.append("    approvals: ").append(toIndentedString(approvals)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    datasource: ").append(toIndentedString(datasource)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    workspace: ").append(toIndentedString(workspace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

